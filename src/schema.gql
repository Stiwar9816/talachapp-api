# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Payment {
  id: Int!
  toll: String!
  transfer: String!
  banner: String!
  card_type: String!
  bank_name: String!
  total: Float!
  state: String!
}

type Price {
  id: Int!
  name: String!
  price: Float!
  stock: Int!
  type: String!
  description: String
  lastUpdateBy: User
  order: Order!
}

type Order {
  id: Int!
  status: String!
  user: User!
  lastUpdateBy: User
  companies: Company!
  payments: Payment!
  prices: [Price!]
}

type Company {
  id: Int!
  name_company: String!
  phone: Int!
  rfc: String
  cfdi: String
  bussiness_name: String!
  address: String
  department: String!
  city: String!
  postal_code: Int
  isActive: Boolean!
  lastUpdateBy: User
}

type Score {
  id: Int!
  rank: Int!
  quality: String
  lastUpdateBy: User
}

type User {
  id: Int!
  fullName: String!
  phone: Float
  email: String!
  roles: [String!]!
  password: String!
  isActive: Boolean!
  lastUpdateBy: User
  companies: Company!
  payments: Payment!
  prices: Price!
  scores: Score!
  orders: Order!
}

"\n    Scheme of how to expect the response from the Auth module of users of [ Signin & Signup ] \n    mutations and [ revalidateToken ] queries \n    { \n        token, \n        User[] \n    }\n    "
type AuthResponde {
  token: String!
  user: User!
}

type Query {
  """Validates the token of the logged in user"""
  revalidate: AuthResponde!

  """Find all users"""
  users(roles: [UserRoles!] = []): [User!]!

  """Search for a user by a unique ID"""
  user(id: Int!): User!

  """Returns all of the registered companies or talacheros"""
  companies: [Company!]!

  """Returns a single specific record queried by ID"""
  company(id: Int!): Company!

  """Search all service orders"""
  orders: [Order!]!

  """Search for a service order by order ID"""
  order(id: Int!): Order!

  """Find all payments"""
  payments: [Payment!]!

  """Search for a single payment by payment ID"""
  payment(id: Int!): Payment!

  """Search all prices"""
  prices: [Price!]!

  """Search for a single price by price ID"""
  price(id: Int!): Price!

  """Filters all prices depending on the type passed as a parameter"""
  priceByType(priceType: String!): [Price!]!

  """Find all ratings"""
  scores: [Score!]!

  """Search for a rating by a unique ID"""
  score(id: Int!): Score!
}

"""Roles allowed in the system [superAdmin, admin, talachero, user]"""
enum UserRoles {
  ADMIN
  TALACHERO
  USUARIO
  SUPERADMIN
}

type Mutation {
  """Create a new user"""
  signup(signupInput: SignupInput!): AuthResponde!

  """User login"""
  signin(signinInput: SigninInput!): AuthResponde!

  """Updates the data of a user by a unique ID"""
  updateUser(updateUserInput: UpdateUserInput!): User!

  """Inactivate a user"""
  blockUser(id: Int!): User!

  """Create a new companies/talacheros"""
  createCompany(createCompanyInput: CreateCompanyInput!): Company!

  """Update the data of a specific company"""
  updateCompany(updateCompanyInput: UpdateCompanyInput!): Company!

  """Inactivates a company by passing the company ID as a parameter"""
  blockCompany(id: Int!): Company!

  """Create a new service order"""
  createOrder(createOrderInput: CreateOrderInput!): Order!

  """Update order status"""
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!

  """Delete the order"""
  removeOrder(id: Int!): Order!

  """Create a new payment"""
  createPayment(createPaymentInput: CreatePaymentInput!): Payment!

  """Create a new price for either a [product, service, or cost]"""
  createPrice(createPriceInput: CreatePriceInput!): Price!

  """Update the price data"""
  updatePrice(updatePriceInput: UpdatePriceInput!): Price!

  """Delete a price with a unique ID"""
  removePrice(id: Int!): Price!

  """Create a new rating"""
  createScore(createScoreInput: CreateScoreInput!): Score!

  """Update a rating with a unique ID"""
  updateScore(updateScoreInput: UpdateScoreInput!): Score!

  """Remove a rating with a unique ID"""
  removeScore(id: Int!): Score!
}

input SignupInput {
  email: String!
  fullName: String!
  phone: Float!
  password: String!
}

input SigninInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  email: String
  fullName: String
  phone: Float
  password: String
  id: Int!
  roles: [UserRoles!]
  isActive: Boolean
}

input CreateCompanyInput {
  name_company: String!
  phone: Int!
  rfc: String
  cfdi: String
  bussiness_name: String!
  address: String
  department: String!
  city: String!
  postal_code: Int
}

input UpdateCompanyInput {
  name_company: String
  phone: Int
  rfc: String
  cfdi: String
  bussiness_name: String
  address: String
  department: String
  city: String
  postal_code: Int
  id: Int!
  isActive: Boolean
}

input CreateOrderInput {
  status: String!
}

input UpdateOrderInput {
  status: String
  id: Int!
}

input CreatePaymentInput {
  toll: String!
  transfer: String!
  banner: String!
  card_type: String!
  bank_name: String!
  total: Float!
  state: [String!]!
}

input CreatePriceInput {
  name: String!
  price: Float!
  stock: Int!
  type: String!
  description: String
}

input UpdatePriceInput {
  name: String
  price: Float
  stock: Int
  type: String
  description: String
  id: Int!
}

input CreateScoreInput {
  rank: Int!
  quality: String
}

input UpdateScoreInput {
  rank: Int
  quality: String
  id: Int!
}
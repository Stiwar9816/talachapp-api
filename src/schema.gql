# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"\n  Scheme where the information about the company's inventory is saved,\n  it can be saved regarding products, \n  services or fixed costs that are handled internally\n  "
type Price {
  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!

  """Name of the product, service or fixed cost"""
  name: String!

  """Assigned value for a product, service or a fixed cost"""
  price: Float!

  """Quantity of the price or product in inventory"""
  stock: Int

  """Type of price which can be [ product, service or fixed cost ]"""
  type: String!

  """
  Description of the added elements [ products, services or fixed costs ]
  """
  description: String

  """image of price type product"""
  image: String
  user: User!

  """
  Returns the information of the user who made the last update of the company data
  """
  lastUpdateBy: User

  """Relationship with the many-to-one companies table"""
  companies: Company
}

"""
Scheme where user rating information is stored for the services provided
"""
type Score {
  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!

  """
  Rating that the user gives to the company or vice versa score from 1 to 5
  """
  rankClient: Float

  """
  Rating that the user gives to the company or vice versa score from 1 to 5
  """
  rankTalachero: Float

  """Quality of service provided"""
  quality: String
  createdAt: DateTime!

  """Order score"""
  orders: Order

  """User information"""
  user: User!

  """
  Returns the information of the user who made the last update of the company data
  """
  lastUpdateBy: User
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"\n  Scheme where all the information on customer orders is stored, \n  as well as the company that will provide the service, the products or services, \n  the method of payment and the user's data.\n  "
type Order {
  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!

  """order status [waiting or completed]"""
  status: String
  total: Float

  """ id order api coneckta"""
  idOrderConekta: String
  createdAt: DateTime!

  """Relationship with the many-to-one users table"""
  user: User!

  """
  Returns the information of the user who made the last update of the company data
  """
  lastUpdateBy: User

  """Relationship with the many-to-one companies table"""
  companies: Company!
  prices: Price!

  """Order score"""
  score: Score!
}

"""
scheme of what the companies table looks like where the information of each company or talachero will be stored
"""
type Company {
  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!

  """company name or talachero"""
  name_company: String!

  """company phone or talachero"""
  phone: Float!

  """
  The Federal Taxpayer Registry (rfc) is an alphanumeric code that the government uses to identify individuals and legal entities that engage in any economic activity, example: "HEGJ820506M10"
  """
  rfc: String

  """business name of the company"""
  bussiness_name: String!

  """Company address"""
  address: String

  """State where the company is located"""
  department: String!

  """City where the company is located"""
  city: String!

  """Company Postal Code"""
  postal_code: Int

  """
  Company status within the system "active || inactive "
  """
  isActive: String!
  tax_regime: String
  geofence: [String!]
  lat: Float!
  lng: Float!

  """One-to-many relationship with user table"""
  userWorker: [User!]
  user: User!
  order: [Order!]!
  price: [Price!]!

  """
  Returns the information of the user who made the last update of the company data
  """
  lastUpdateBy: User
}

"""Schema where the information of the system locations is stored"""
type Location {
  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!

  """Geohash Firebase"""
  geohash: String!

  """GeoPoint Firebase"""
  geopoint: String!

  """Status Firebase"""
  status: String!
  user: User!
}

"""Schema where the information of the system users is stored"""
type User {
  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!
  idFirebase: String

  """Full name of the user"""
  fullName: String!

  """User phone"""
  phone: Float!

  """User email"""
  email: String!

  """
  The Federal Taxpayer Registry (rfc) is an alphanumeric code that the government uses to identify individuals and legal entities that engage in any economic activity, example: "HEGJ820506M10"
  """
  rfc: String

  """
  User roles which can be [ admin, user or talachero ] by default takes the user role
  """
  roles: [String!]!

  "\n    User password that must have a minimum length of 6 digits\n    and the password must have an Uppercase, lowercase letter and a number\n    "
  password: String!

  """User status in the system [ active or inactive ]"""
  isActive: String!
  geofence: [String!]
  lat: Float
  lng: Float
  token: String
  companiesWorker: Company

  """One-to-many relationship with company table"""
  companies: [Company!]!

  """
  Returns the information of the user who made the last update of the company data
  """
  lastUpdateBy: User

  """One-to-many relationship with price table"""
  prices: Price!

  """One-to-many relationship with score table"""
  scores: Score!

  """One-to-many relationshi p with order table"""
  orders: Order!

  """One-to-many relationship with order table"""
  location: Location
}

"\n        Scheme of how to expect the response from the Auth module of users of [ Signin & Signup ] \n        mutations and [ revalidateToken ] queries \n        { \n            token, \n            User[] \n        }\n    "
type AuthResponde {
  token: String!
  user: User!
}

type Query {
  """Validates the token of the logged in user"""
  revalidate: AuthResponde!

  """Find all users"""
  users(roles: [UserRoles!] = []): [User!]!

  """Search for a user by a unique ID"""
  user(id: String!): User!

  """Search for a user by a unique Email"""
  userByEmail(email: String!): User!

  """Returns all of the registered companies or talacheros"""
  companies: [Company!]!

  """Returns a single specific record queried by ID"""
  company(id: String!): Company!

  """Returns the count of workers related to a specific company"""
  workerCountByCompany(companyId: String!): Float!

  """Search all service orders"""
  orders: [Order!]!

  """Search for a service order by order ID"""
  order(id: String!): Order!

  """Search all prices"""
  prices: [Price!]!

  """Search for a single price by price ID"""
  price(id: String!): Price!

  """Filters all prices depending on the type passed as a parameter"""
  priceByType(priceType: String!): [Price!]!
  pricesByIds(ids: [String!]!): [Price!]!

  """Find all ratings"""
  scores: [Score!]!

  """Search for a rating by a unique ID"""
  score(id: String!): Score!

  """"""
  locations: [Location!]!

  """"""
  location(id: String!): Location!
}

"""Roles allowed in the system [superAdmin, admin,talachero, user]"""
enum UserRoles {
  Administrador
  Talachero
  Usuario
  superAdmin
  Trabajador
}

type Mutation {
  """Create a new user"""
  signup(signupInput: SignupInput!, idCompany: String): AuthResponde!

  """User login"""
  signin(signinInput: SigninInput!): AuthResponde!

  """Updates the data of a user by a unique ID"""
  updateUser(updateUserInput: UpdateUserInput!, idCompany: String): User!

  """Inactivate a user"""
  blockUser(id: String!): User!

  """Reset password user"""
  resetPassword(resetPassword: String!): User!

  """Reset password user authenticed"""
  resetPasswordAuth(newPassword: String!): User!

  """Updates the data of a user by a unique ID"""
  updateUserToken(email: String!, token: String!): User!

  """Create a new companies/talacheros"""
  createCompany(createCompanyInput: CreateCompanyInput!, idCompany: String): Company!

  """Update the data of a specific company"""
  updateCompany(updateCompanyInput: UpdateCompanyInput!, idCompany: String): Company!

  """Inactivates a company by passing the company ID as a parameter"""
  blockCompany(id: String!): Company!

  """Create a new service order"""
  createOrder(createOrderInput: CreateOrderInput!, ids: [String!]!, idCompany: String): Order!

  """Update order status"""
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!

  """Delete the order"""
  removeOrder(id: String!): Order!

  """Create a new price for either a [product, service, or cost]"""
  createPrice(createPriceInput: CreatePriceInput!, idCompany: String, file: Upload): Price!

  """Update the price data"""
  updatePrice(updatePriceInput: UpdatePriceInput!, file: Upload): Price!

  """Delete a price with a unique ID"""
  removePrice(id: String!): Price!

  """Create a new rating"""
  createScore(createScoreInput: CreateScoreInput!): Score!

  """Update a rating with a unique ID"""
  updateScore(updateScoreInput: UpdateScoreInput!): Score!

  """Remove a rating with a unique ID"""
  removeScore(id: String!): Score!

  """"""
  createLocation(createLocationInput: CreateLocationInput!): Location!

  """remove location for userId"""
  removeLocation(id: String!): Location!
}

"""Diagram of the fields requested for the registration of a user"""
input SignupInput {
  idFirebase: String

  """User email"""
  email: String!

  """Full name of the user"""
  fullName: String!

  """User phone"""
  phone: Float!

  "\n        User password that must have a minimum length of 6 digits\n        and the password must have an Uppercase, lowercase letter and a number\n        "
  password: String! = "Ih9/R*flmF02iyV0D6j%"

  """
  User roles which can be [ admin, user or talachero ] by default takes the user role
  """
  roles: [String!]!

  """User status in the system [ active (true) or inactive (false) ]"""
  isActive: String! = "Activo"
}

"""Diagram of the fields requested for system login"""
input SigninInput {
  """User email"""
  email: String!

  "\n        User password that must have a minimum length of 6 digits\n        and the password must have an Uppercase, lowercase letter and a number\n        "
  password: String!
}

"""
Diagram of the fields enabled to be able to be modified by the system admin for a specific user
"""
input UpdateUserInput {
  idFirebase: String

  """User email"""
  email: String

  """Full name of the user"""
  fullName: String

  """User phone"""
  phone: Float

  "\n    User password that must have a minimum length of 6 digits\n    and the password must have an Uppercase, lowercase letter and a number\n    "
  password: String

  """User status in the system [ active (true) or inactive (false) ]"""
  isActive: String! = "Activo"

  """User role in the system [ Administrador, Talachero or Usuario ]"""
  roles: [UserRoles!]

  """
  The Federal Taxpayer Registry (rfc) is an alphanumeric code that the government uses to identify individuals and legal entities that engage in any economic activity, example: "HEGJ820506M10"
  """
  rfc: String
  geofence: [String!]
  lat: Float
  lng: Float
  token: String

  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!
}

"""Diagram of the information expected to create a new company/talacheros"""
input CreateCompanyInput {
  """company name or talachero"""
  name_company: String!

  """company phone or talachero"""
  phone: Float!

  """
  The Federal Taxpayer Registry (rfc) is an alphanumeric code that the government uses to identify individuals and legal entities that engage in any economic activity, example: "HEGJ820506M10"
  """
  rfc: String

  """business name of the company"""
  bussiness_name: String!

  """Company address"""
  address: String

  """State where the company is located"""
  department: String!

  """City where the company is located"""
  city: String!

  """Company Postal Code"""
  postal_code: Int
  isActive: String! = "Inactivo"
  geofence: [String!]
  lat: Float!
  lng: Float!
  tax_regime: String
}

"""
Diagram of the fields enabled to be able to be modified by the admin for a specific company
"""
input UpdateCompanyInput {
  """company name or talachero"""
  name_company: String

  """company phone or talachero"""
  phone: Float

  """
  The Federal Taxpayer Registry (rfc) is an alphanumeric code that the government uses to identify individuals and legal entities that engage in any economic activity, example: "HEGJ820506M10"
  """
  rfc: String

  """business name of the company"""
  bussiness_name: String

  """Company address"""
  address: String

  """State where the company is located"""
  department: String

  """City where the company is located"""
  city: String

  """Company Postal Code"""
  postal_code: Int

  """
  Company status within the system "active (true) || inactive (false)"
  """
  isActive: String! = "Inactivo"
  geofence: [String!]
  lat: Float
  lng: Float
  tax_regime: String

  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!
}

"""Schema of the information expected to create a new service order"""
input CreateOrderInput {
  """order status [waiting or completed]"""
  status: String
  total: Float
}

"\n  Diagram of the fields enabled to be able to be modified by the admin, \n  talachero or user by default for a specific service order  \n  "
input UpdateOrderInput {
  """order status [waiting or completed]"""
  status: String
  total: Float

  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!
}

"""
Outline of information that is expected to create a new price for a [product, service, or cost]
"""
input CreatePriceInput {
  """Name of the product, service or fixed cost"""
  name: String!

  """Assigned value for a product, service or a fixed cost"""
  price: Float!

  """Quantity of the price or product in inventory"""
  stock: Int

  """Type of price which can be [ product, service or fixed cost ]"""
  type: String!

  """
  Description of the added elements [ products, services or fixed costs ]
  """
  description: String
  file: Upload
  image: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"\n  Diagram of the fields enabled to be able to be modified \n  by the admin or talachero for a specific price\n  "
input UpdatePriceInput {
  """Name of the product, service or fixed cost"""
  name: String

  """Assigned value for a product, service or a fixed cost"""
  price: Float

  """Quantity of the price or product in inventory"""
  stock: Int

  """Type of price which can be [ product, service or fixed cost ]"""
  type: String

  """
  Description of the added elements [ products, services or fixed costs ]
  """
  description: String
  file: Upload
  image: String

  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!
}

"""Summary of information that is expected to create a new rating"""
input CreateScoreInput {
  """
  Rating that the user gives to the company or vice versa score from 1 to 5
  """
  rankClient: Float

  """
  Rating that the user gives to the company or vice versa score from 1 to 5
  """
  rankTalachero: Float

  """Quality of service provided"""
  quality: String
}

"\n  Diagram of the fields enabled to be able to be modified by the admin,\n  talachero or user by default for a specific qualification\n  "
input UpdateScoreInput {
  """
  Rating that the user gives to the company or vice versa score from 1 to 5
  """
  rankClient: Float

  """
  Rating that the user gives to the company or vice versa score from 1 to 5
  """
  rankTalachero: Float

  """Quality of service provided"""
  quality: String

  """Id automatically generated in integer format eg: 1,2,3.."""
  id: String!
}

"""Outline of information that is expected to create a new location"""
input CreateLocationInput {
  geohash: String!
  geopoint: String!
  status: String!
}

type Subscription {
  """Subscribe to new users"""
  newUser: AuthResponde!

  """Subscribe to new companies"""
  newCompany: Company!

  """Subscribe to new orders"""
  newOrder: Order!

  """Subscribe to new prices"""
  newPrice: Price!

  """Subscribe to new scores"""
  newScore: Score!

  """Subscribe to new scores"""
  newLocation: Location!
}